---
apiVersion: v1
kind: Namespace
metadata:
  name: stage
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: book
  namespace: stage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: book
  template:
    metadata:
      labels:
        app: book
    spec:
      containers:
      - name: nginx
        image: nginx:1.17.3
        ports:
        - containerPort: 80
        volumeMounts:
        - name: workdir
          mountPath: /usr/share/nginx/html
  # These containers are run during pod initialization
      initContainers:
      - name: install
        image: bitnami/git
        command: ["git"]
        args: ["clone", "https://github.com/aws-samples/amazon-apigateway-ingress-controller-blog.git", "/var/lib/data/"]
        volumeMounts:
        - name: workdir
          mountPath: "/var/lib/data"
      dnsPolicy: Default
      volumes:
      - name: workdir
        emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: author
  namespace: stage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: author
  template:
    metadata:
      labels:
        app: author
    spec:
      containers:
      - name: nginx
        image: nginx:1.17.3
        ports:
        - containerPort: 80
        volumeMounts:
        - name: workdir
          mountPath: /usr/share/nginx/html
  # These containers are run during pod initialization
      initContainers:
      - name: install
        image: bitnami/git
        command: ["git"]
        args: ["clone", "https://github.com/aws-samples/amazon-apigateway-ingress-controller-blog.git", "/var/lib/data/"]
        volumeMounts:
        - name: workdir
          mountPath: "/var/lib/data"
      dnsPolicy: Default
      volumes:
      - name: workdir
        emptyDir: {}
--- 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app3v1
  namespace: stage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app3
      version: v1
  template:
    metadata:
      labels:
        app: app3
        version: v1
    spec:
      containers:
        - name: app
          image: "672518094988.dkr.ecr.us-west-2.amazonaws.com/hello-world:v1.0"
          imagePullPolicy: Always
          ports:
            - containerPort: 9080
          env:
            - name: "HW_RESPONSE"
              value: "[\"Hello from app3 v1\"]"
---  
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app3v2
  namespace: stage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app3
      version: v2
  template:
    metadata:
      labels:
        app: app3
        version: v2
    spec:
      containers:
        - name: app
          image: "672518094988.dkr.ecr.us-west-2.amazonaws.com/hello-world:v1.0"
          imagePullPolicy: Always
          ports:
            - containerPort: 9080
          env:
            - name: "HW_RESPONSE"
              value: "[\"Hello from app3 v2\"]"
--- 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app4v1
  namespace: stage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app4
      version: v1
  template:
    metadata:
      labels:
        app: app4
        version: v1
    spec:
      containers:
        - name: app
          image: "672518094988.dkr.ecr.us-west-2.amazonaws.com/hello-world:v1.0"
          imagePullPolicy: Always
          ports:
            - containerPort: 9080
          env:
            - name: "HW_RESPONSE"
              value: "[\"Hello from app4 v1\"]"
---  
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app4v2
  namespace: stage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app4
      version: v2
  template:
    metadata:
      labels:
        app: app4
        version: v2
    spec:
      containers:
        - name: app
          image: "672518094988.dkr.ecr.us-west-2.amazonaws.com/hello-world:v1.0"
          imagePullPolicy: Always
          ports:
            - containerPort: 9080
          env:
            - name: "HW_RESPONSE"
              value: "[\"Hello from app4 v2\"]"
---               
apiVersion: v1
kind: Service
metadata:
  name: service1
  namespace: stage
spec:
  type: ClusterIP
  selector:
    app: book
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
--- 
apiVersion: v1
kind: Service
metadata:
  name: service2
  namespace: stage
spec:
  type: ClusterIP
  selector:
    app: author
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
--- 
apiVersion: v1
kind: Service
metadata:
  name: service3v1
  namespace: stage
  labels:
    app: app3
    version: v1
spec:
  type: ClusterIP    
  selector:
    app: app3
    version: v1
  ports:
  - protocol: TCP
    port: 9080
    targetPort: 9080
--- 
apiVersion: v1
kind: Service
metadata:
  name: service3v2
  namespace: stage
  labels:
    app: app3
    version: v2
spec:
  type: ClusterIP    
  selector:
    app: app3
    version: v2
  ports:
  - protocol: TCP
    port: 9080
    targetPort: 9080
--- 
apiVersion: v1
kind: Service
metadata:
  name: service4v1
  namespace: stage
  labels:
    app: app4
    version: v1
spec:
  type: ClusterIP    
  selector:
    app: app4
    version: v1
  ports:
  - protocol: TCP
    port: 9080
    targetPort: 9080
--- 
apiVersion: v1
kind: Service
metadata:
  name: service4v2
  namespace: stage
  labels:
    app: app4
    version: v2
spec:
  type: ClusterIP    
  selector:
    app: app4
    version: v2
  ports:
  - protocol: TCP
    port: 9080
    targetPort: 9080
--- 
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    apigateway.ingress.kubernetes.io/client-arns: arn:aws:iam::000474600478:user/apigw-user
    apigateway.ingress.kubernetes.io/stage-name: stage
    kubernetes.io/ingress.class: apigateway
    apigateway.ingress.kubernetes.io/nginx-replicas: "3"
    apigateway.ingress.kubernetes.io/nginx-image: nginx:latest
    apigateway.ingress.kubernetes.io/nginx-service-port: "9090"    
  name: apigw-ingress
  namespace: stage
spec:
  rules:
    - http:
        paths:
        - backend:
            serviceName: service1
            servicePort: 80
          path: /api/book
        - backend:
            serviceName: service2
            servicePort: 80
          path: /api/author
        - backend:
            serviceName: service3v1
            servicePort: 9080
          path: /
        - backend:
            serviceName: service3v2
            servicePort: 9080
          path: /api/app3v2
        - backend:
            serviceName: service4v1
            servicePort: 9080
          path: /api/app4v1
        - backend:
            serviceName: service4v2
            servicePort: 9080
          path: /api/app4v2          
